### YamlMime:Tutorial
title: "<span data-ttu-id=\"3b7bd-101\">Chaînes interpolées en C#</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-101\">Interpolated strings in C#</span></span>"
metadata:
  title: "Chaînes interpolées en C#. Découvrez comment construire une chaîne qui comprend d’autres valeurs, telles que des dates ou des nombres."
  description: "Dans ce didacticiel, vous allez utiliser la fonctionnalité de chaîne interpolée C# de manière interactive dans votre navigateur. Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: <span data-ttu-id="3b7bd-106">Collections en C#</span><span class="sxs-lookup"><span data-stu-id="3b7bd-106">Collections in C#</span></span>
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 2
  content: "<span data-ttu-id=\"3b7bd-107\">Ce guide de démarrage rapide explique comment utiliser des chaînes interpolées en C# pour insérer de manière interactive des valeurs dans une chaîne à sortie unique.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-107\">This quick start teaches you how to use interpolated strings in C# to insert values into a single ouput string interactively.</span></span> <span data-ttu-id=\"3b7bd-108\">En utilisant votre navigateur pour écrire du code C#, vous pouvez voir immédiatement les résultats de la compilation et de l’exécution de votre code.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-108\">You use your browser to write C# code and can immediately see the results of compiling and running your code.</span></span> <span data-ttu-id=\"3b7bd-109\">Le guide de démarrage rapide contient une série de leçons qui concatènent des chaînes, insèrent des valeurs dans des chaînes et mettent en forme ces valeurs de différentes façons.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-109\">The quick start contains a series of lessons that concatenate strings, insert values into strings, and format those values in different ways.</span></span>\n"
- title: "<span data-ttu-id=\"3b7bd-110\">Créer une chaîne interpolée</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-110\">Create an interpolated string</span></span>"
  durationInMinutes: 2
  content: "<span data-ttu-id=\"3b7bd-111\">Exécutez le code suivant dans la fenêtre interactive.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"3b7bd-112\">Pour ce faire, tapez le bloc de code suivant dans la fenêtre interactive (remplacez « \\<name> » par votre nom) et cliquez sur le bouton **Exécuter** :</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-112\">To do that, type the following code block in the interactive window (replace \"\\<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"3b7bd-113\">Quand vous exécutez le programme, celui-ci affiche une chaîne unique qui inclut votre nom dans le message d’accueil.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-113\">When you run the program, it displays a single string that includes your name in the greeting.</span></span> <span data-ttu-id=\"3b7bd-114\">La chaîne qui se trouve dans l’appel de méthode <xref:System.Console.WriteLine%2A> est une *chaîne interpolée*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-114\">The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"3b7bd-115\">C’est un genre de modèle qui vous permet de construire une chaîne unique (appelée *chaîne de résultat*) à partir d’une chaîne qui comprend du code incorporé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-115\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"3b7bd-116\">Les chaînes interpolées sont particulièrement utiles pour insérer des valeurs dans une chaîne ou pour concaténer (joindre) des chaînes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-116\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</span></span> \n\n<span data-ttu-id=\"3b7bd-117\">Cet exemple simple contient les deux éléments que chaque chaîne interpolée doit avoir :</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-117\">This simple example contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"3b7bd-118\">Un littéral de chaîne qui commence par le caractère `$` avant ses guillemets ouvrants.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-118\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"3b7bd-119\">Il ne peut pas y avoir d’espace entre le symbole `$` et les guillemets.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-119\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"3b7bd-120\">(Si vous voulez voir ce qui se passe si vous en incluez un, insérez un espace après le caractère `$` dans la fenêtre interactive et cliquez sur le bouton **Exécuter**.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-120\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and click the **Run** button.</span></span> <span data-ttu-id=\"3b7bd-121\">Le compilateur C# affiche un message d’erreur : « Caractère inattendu '$' ».)</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-121\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"3b7bd-122\">Une ou plusieurs *expressions interpolées*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-122\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"3b7bd-123\">Une expression interpolée est indiquée par des accolades ouvrantes et fermantes (`{` et `}`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-123\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"3b7bd-124\">Vous pouvez placer n’importe quelle expression C# qui retourne une valeur (notamment `null`) à l’intérieur des accolades.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-124\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"3b7bd-125\">Essayons quelques autres exemples de chaînes interpolées avec d’autres types de données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-125\">Let's try a few more interpolated string examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"3b7bd-126\">Cette expérience de code en ligne est en mode preview.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-126\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"3b7bd-127\">Si vous rencontrez des problèmes, veuillez les signaler [sur le dépôt dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-127\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"3b7bd-128\">Inclure différents types de données</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-128\">Include different data types</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"3b7bd-129\">Dans le guide de démarrage rapide précédent, vous avez utilisé une chaîne interpolée pour insérer une chaîne à l’intérieur d’une autre.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-129\">In the previous quick start, you used an interpolated string to insert one string inside of another.</span></span> <span data-ttu-id=\"3b7bd-130\">Une expression de chaîne interpolée peut toutefois être de n’importe quel type de données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-130\">An interpolated string expression can be any data type, though.</span></span> <span data-ttu-id=\"3b7bd-131\">Essayons une chaîne interpolée qui a des valeurs de plusieurs types de données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-131\">Let's try an interpolated string that has values of multiple data types.</span></span> \n\n<span data-ttu-id=\"3b7bd-132\">L’exemple suivant comprend des expressions interpolées avec un objet `Vegetable`, un membre de l’énumération `Unit`, une valeur <xref:System.DateTime> et une valeur <xref:System.Decimal>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-132\">The following example includes interpolated expressions with a `Vegetable` object, a member of the `Unit` enumeration, a <xref:System.DateTime> value, and a <xref:System.Decimal> value.</span></span> <span data-ttu-id=\"3b7bd-133\">Exécutez-le dans la fenêtre interactive.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-133\">Run it in the interactive window.</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n<span data-ttu-id=\"3b7bd-134\">Notez que l’une des expressions interpolées comprend l’objet `item` dans la chaîne de résultat affichée dans la console, et dans ce cas la chaîne « eggplant » est insérée dans la chaîne de résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-134\">Note that one of the interpolated expressions includes the `item` object in the result string that's displayed to the console, and in this case the string \"eggplant\" is inserted into the result string.</span></span> <span data-ttu-id=\"3b7bd-135\">Cela est dû au fait que quand le type d’une expression interpolée n’est pas une chaîne, le compilateur Visual C# effectue les opérations suivantes :</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-135\">That's because, when the type of an interpolated expression is not a string, the C# compiler does the following:</span></span>\n\n- <span data-ttu-id=\"3b7bd-136\">Si l’expression interpolée est `null`, elle retourne une chaîne vide (« », ou <xref:System.String.Empty?displayProperty=nameWithType>).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-136\">If the interpolated expression is `null`, the interpolated expression returns an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>).</span></span>\n\n- <span data-ttu-id=\"3b7bd-137\">Si l’expression interpolée n’est pas `null`, la méthode `ToString` du type de l’expression interpolée est appelée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-137\">If the interpolated expression is not `null`, the `ToString` method of the type of the interpolated expression is called.</span></span> <span data-ttu-id=\"3b7bd-138\">Vous pouvez tester cela en commentant la définition de la méthode `Vegetable.ToString` dans l’exemple en plaçant un symbole de commentaire (`//`) devant elle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-138\">You can test this by commenting out the definition of the `Vegetable.ToString` method in the example by putting a comment symbol (`//`) in front of it.</span></span> <span data-ttu-id=\"3b7bd-139\">Dans la sortie, la chaîne « eggplant » est remplacée par le nom de type qualifié complet (l’espace de noms défini par la boucle REPL C#, plus le nom de type), ce qui est le comportement par défaut de la méthode <xref:System.Object.ToString?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-139\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span>   \n\n<span data-ttu-id=\"3b7bd-140\">Dans la sortie de cet exemple, la date est trop précise (le prix des aubergines ne varie pas chaque seconde) et la valeur du prix n’indique pas de monnaie locale.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-140\">In the output from this example, the date is too precise (the price of eggplant does not vary by the second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"3b7bd-141\">À l’étape suivante, vous découvrirez comment résoudre ces problèmes en contrôlant le format des chaînes retournées par les expressions interpolées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-141\">In the next step, you'll learn how to fix those issues by controlling the format of strings returned by interpolated expressions.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"3b7bd-142\">Cette expérience de code en ligne est en mode preview.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-142\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"3b7bd-143\">Si vous rencontrez des problèmes, veuillez les signaler [sur le dépôt dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-143\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"3b7bd-144\">Contrôler la mise en forme des expressions interpolées</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-144\">Control the formatting of interpolated expressions</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"3b7bd-145\">Dans la leçon précédente, deux chaînes à la mise en forme incorrecte ont été insérées dans la chaîne de résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-145\">In the previous lesson, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id=\"3b7bd-146\">L’une était une valeur de date et d’heure pour laquelle seule la date était appropriée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-146\">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id=\"3b7bd-147\">La deuxième était un prix qui n’indiquait pas la monnaie locale.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-147\">The second was a price that did not indicate its unit of currency.</span></span> <span data-ttu-id=\"3b7bd-148\">Ces deux problèmes sont faciles à résoudre.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-148\">Both issues are easy to address.</span></span> <span data-ttu-id=\"3b7bd-149\">Les expressions interpolées peuvent inclure des *chaînes de format* qui gèrent la mise en forme de types particuliers.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-149\">Interpolated expressions can include *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id=\"3b7bd-150\">Modifiez l’appel à `Console.WriteLine` dans l’exemple précédent de façon à inclure le spécificateur de format pour les champs de date et de prix, comme indiqué sur la ligne suivante :</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-150\">Modify the call to `Console.WriteLine` from the previous example to include the format specifier for the date and price fields as shown in the following line:</span></span>\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\n<span data-ttu-id=\"3b7bd-151\">Vous spécifiez une chaîne de format en plaçant après l’expression interpolée un signe deux-points et la chaîne de format.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-151\">You specify a format string by following the interpolated expression with a colon and the format string.</span></span> <span data-ttu-id=\"3b7bd-152\">« d » est une [chaîne de format de date et d’heure standard](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) qui représente le format de date courte.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-152\">\"d\" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id=\"3b7bd-153\">« C2 » est une [chaîne de format numérique standard](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) qui représente un nombre sous forme de valeur monétaire avec deux chiffres après la virgule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-153\">\"C2\" is a  [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>\n\n<span data-ttu-id=\"3b7bd-154\">Plusieurs types dans les bibliothèques .NET Standard prennent en charge un ensemble prédéfini de chaînes de format.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-154\">A number of types in the .NET Standard libraries support a predefined set of format strings.</span></span> <span data-ttu-id=\"3b7bd-155\">Il s’agit notamment de tous les types numériques et des types de date et d’heure.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-155\">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id=\"3b7bd-156\">Pour obtenir une liste complète des types qui prennent en charge les chaînes de format, consultez [Chaînes de format et types de bibliothèque de classes .NET](../../standard/base-types/formatting-types.md#stringRef) dans l’article [Mise en forme des types dans .NET](../../standard/base-types/formatting-types.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-156\">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span> <span data-ttu-id=\"3b7bd-157\">Tout type peut prendre en charge un ensemble de chaînes de format, et vous pouvez également développer des extensions de mise en forme personnalisées qui fournissent une mise en forme personnalisée pour des types existants.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-157\">Any type can support a set of format strings, and you can also develop custom formatting extensions that provide custom formatting for existing types.</span></span> <span data-ttu-id=\"3b7bd-158\">Pour plus d’informations sur la mise en forme personnalisée à l’aide d’une implémentation<xref:System.ICustomFormatter>, consultez [Mise en forme personnalisée avec ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) dans l’article [Mise en forme des types dans .NET](../../standard/base-types/formatting-types.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-158\">For information on custom formatting by providing an <xref:System.ICustomFormatter> implementation, see [Custom Formatting with ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>\n\n<span data-ttu-id=\"3b7bd-159\">Essayez de modifier les chaînes de format dans **l’Éditeur .NET** pour voir comment elles affectent la mise en forme de la date et de l’heure et la valeur numérique.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-159\">Try modifying the the format strings in the **.NET Editor** to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id=\"3b7bd-160\">Remplacez le « d » dans `{date:d}` par « t » (pour afficher le format d’heure courte), « y » (pour afficher l’année et mois) et « yyyy » (pour afficher l’année sous forme de nombre à quatre chiffres).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-160\">Change the \"d\" in `{date:d}` to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number).</span></span> <span data-ttu-id=\"3b7bd-161\">Remplacez le « C2 » dans `{price:C2}` par « e » (pour la notation exponentielle) et « F3 » (pour une valeur numérique avec trois chiffres après la virgule).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-161\">Change the \"C2\" in `{price:C2}` to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point).</span></span>\n\n<span data-ttu-id=\"3b7bd-162\">En plus de la mise en forme, vous pouvez aussi contrôler la largeur de champ et l’alignement des chaînes retournées par une expression interpolée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-162\">In addition to controlling formatting, you can also control the field width and alignment of the strings returned by an interpolated expression.</span></span> <span data-ttu-id=\"3b7bd-163\">À l’étape suivante, vous allez découvrir comment effectuer cette opération.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-163\">In the next step, you'll learn how to do this.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"3b7bd-164\">Cette expérience de code en ligne est en mode preview.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-164\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"3b7bd-165\">Si vous rencontrez des problèmes, veuillez les signaler [sur le dépôt dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-165\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"3b7bd-166\">Contrôler la largeur de champ et l’alignement des expressions interpolées</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-166\">Control the field width and alignment of interpolated expressions</span></span>"
  durationInMinutes: 6
  content: "<span data-ttu-id=\"3b7bd-167\">En règle générale, quand la chaîne retournée par une expression interpolée est comprise dans une chaîne de résultat, elle ne comporte aucun espace de début ou de fin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-167\">Ordinarily, when the string returned by an interpolated expression is included in a result string, it has no leading or trailing spaces.</span></span> <span data-ttu-id=\"3b7bd-168\">En particulier pour les instances dans lesquelles vous travaillez avec un jeu de données, les expressions interpolées vous permettent de spécifier la largeur d’un champ et son alignement.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-168\">Particularly for instances in which you are working with a set of data, interpolated expressions let you specify a field width and its alignment.</span></span> <span data-ttu-id=\"3b7bd-169\">Pour observer cela, exécutez le code suivant.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-169\">To see this, run the following code.</span></span>\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n<span data-ttu-id=\"3b7bd-170\">Les noms des éléments sont alignés à gauche, tandis que leurs quantités sont alignées à droite.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-170\">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id=\"3b7bd-171\">Vous spécifiez l’alignement en ajoutant une virgule (« , ») après l’expression et en spécifiant la largeur du champ.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-171\">You specify the alignment by adding a comma (\",\") after the expression and designating the field width.</span></span> <span data-ttu-id=\"3b7bd-172\">Si la largeur du champ est un nombre positif, le champ est aligné à droite :</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-172\">If the field width is a positive number, the field is right-aligned:</span></span>\n\n```text\n{expression, width}\n```\n\n<span data-ttu-id=\"3b7bd-173\">Si la largeur du champ est un nombre négatif, le champ est aligné à gauche :</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-173\">If the field width is a negative number, the field is left-aligned:</span></span>\n\n```text\n{expression, -width}\n```\n<span data-ttu-id=\"3b7bd-174\">Essayez de supprimer les signes négatifs des expressions interpolées `{\"Item\",-25}` et `{item.Key,-25}`, puis réexécutez l’exemple.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-174\">Try removing the negative signs from the `{\"Item\",-25}` and `{item.Key,-25}` interpolated expressions and run the example again.</span></span> <span data-ttu-id=\"3b7bd-175\">Cette fois, le nom de l’élément est aligné à droite.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-175\">This time, the item name is right-aligned.</span></span>\n\n<span data-ttu-id=\"3b7bd-176\">Vous pouvez combiner une largeur de champ et une chaîne de format dans une même expression interpolée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-176\">You can combine a field width and a format string in a single interpolated expression.</span></span> <span data-ttu-id=\"3b7bd-177\">La largeur du champ figure en premier, suivie d’un signe deux-points et de la chaîne de format.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-177\">The field width comes first, followed by a colon and the format string.</span></span> <span data-ttu-id=\"3b7bd-178\">Essayez ce programme simple qui affiche trois chaînes mises en forme avec des largeurs de champs définies.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-178\">Try the following simple program that displays three formatted strings with defined field widths.</span></span>\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"3b7bd-179\">Cette expérience de code en ligne est en mode preview.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-179\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"3b7bd-180\">Si vous rencontrez des problèmes, veuillez les signaler [sur le dépôt dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-180\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"3b7bd-181\">Vous avez terminé le guide de démarrage rapide sur les chaînes interpolées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-181\">You've completed the interpolated strings quick start.</span></span> \n\n<span data-ttu-id=\"3b7bd-182\">Vous pouvez poursuivre ces guides de démarrage rapide dans votre propre environnement de développement local.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-182\">You can continue these quick starts on your own local development environment.</span></span> <span data-ttu-id=\"3b7bd-183\">Découvrez les principes fondamentaux du [développement local](local-environment.md) puis choisissez un guide de démarrage rapide.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-183\">Learn the basics of [local development](local-environment.md) and then pick a quick start.</span></span> <span data-ttu-id=\"3b7bd-184\">Vous pouvez essayer ce même exercice, passer directement au guide de démarrage rapide suivant, ou recommencer à partir du guide de démarrage rapide sur les [nombres en C#](numbers-in-csharp-local.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-184\">You can try this same exercise, move directly to the next quick start, or start again with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"3b7bd-185\">Plus d’informations sur l’utilisation des chaînes interpolées, consultez la rubrique [Chaînes interpolées](../language-reference/keywords/interpolated-strings.md) dans les informations de référence sur C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3b7bd-185\">You can learn more about working with interpolated strings in the [Interpolated Strings](../language-reference/keywords/interpolated-strings.md) topic in the C# Reference.</span></span>\0"
