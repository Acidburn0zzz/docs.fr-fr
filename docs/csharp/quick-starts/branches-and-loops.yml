### YamlMime:YamlDocument
documentType: Tutorial
title: Branches et boucles
metadata:
  title: <span data-ttu-id="05321-102">Branches et boucles</span><span class="sxs-lookup"><span data-stu-id="05321-102">Branches and loops</span></span>
  description: '<span data-ttu-id="05321-103">Dans ce didacticiel sur les branches et les boucles, vous allez utiliser votre navigateur pour découvrir C# de manière interactive.</span><span class="sxs-lookup"><span data-stu-id="05321-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="05321-104">Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur.</span><span class="sxs-lookup"><span data-stu-id="05321-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: "<span data-ttu-id=\"05321-105\">Ce didacticiel vous explique comment écrire un code qui examine des variables et modifie un chemin d’exécution en fonction de ces variables.</span><span class=\"sxs-lookup\"><span data-stu-id=\"05321-105\">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id=\"05321-106\">Vous allez écrire en C# de manière interactive à l’aide de votre navigateur et afficher les résultats de la compilation et de l’exécution de votre code.</span><span class=\"sxs-lookup\"><span data-stu-id=\"05321-106\">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"05321-107\">Il contient une série de leçons pour explorer la création de branches et de boucles en C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"05321-107\">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id=\"05321-108\">Ces leçons présentent les concepts de base du langage\_C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"05321-108\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
  - title: <span data-ttu-id="05321-109">Prendre des décisions à l’aide de l’instruction if</span><span class="sxs-lookup"><span data-stu-id="05321-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="05321-110">Exécutez le code suivant dans la fenêtre interactive.</span><span class="sxs-lookup"><span data-stu-id="05321-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="05321-111">Pour ce faire, tapez le bloc de code suivant dans la fenêtre interactive et cliquez sur le bouton **Exécuter** :</span><span class="sxs-lookup"><span data-stu-id="05321-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="05321-112">Modifiez la déclaration de `b` pour que la somme soit inférieure à 10 :</span><span class="sxs-lookup"><span data-stu-id="05321-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="05321-113">Cliquez de nouveau sur le bouton **Exécuter**.</span><span class="sxs-lookup"><span data-stu-id="05321-113">Click the **Run** button again.</span></span> <span data-ttu-id="05321-114">La réponse étant inférieure à 10, rien ne s’affiche.</span><span class="sxs-lookup"><span data-stu-id="05321-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="05321-115">La **condition** que vous testez a une valeur false.</span><span class="sxs-lookup"><span data-stu-id="05321-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="05321-116">Vous n’avez pas de code à exécuter, car vous avez uniquement écrit l’une des branches possibles pour une instruction `if` : la branche true.</span><span class="sxs-lookup"><span data-stu-id="05321-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="05321-117">Durant votre exploration de C# (ou de tout autre langage de programmation), vous commettrez des erreurs d’écriture du code.</span><span class="sxs-lookup"><span data-stu-id="05321-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="05321-118">Le **compilateur** détectera ces erreurs et vous les signalera.</span><span class="sxs-lookup"><span data-stu-id="05321-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="05321-119">Si la sortie contient des messages d’erreur, vérifiez attentivement l’exemple de code ainsi que le code dans la fenêtre interactive pour identifier les corrections à apporter.</span><span class="sxs-lookup"><span data-stu-id="05321-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="05321-120">Cet exercice vous aidera à mieux comprendre la structure du code C#.</span><span class="sxs-lookup"><span data-stu-id="05321-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="05321-121">Le premier exemple montre la puissance de l’instruction `if` et des types booléens.</span><span class="sxs-lookup"><span data-stu-id="05321-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="05321-122">Un *booléen* est une variable qui peut avoir l’une des deux valeurs suivantes : `true` ou `false`.</span><span class="sxs-lookup"><span data-stu-id="05321-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="05321-123">C# définit un type spécial, `bool`, pour les variables booléennes.</span><span class="sxs-lookup"><span data-stu-id="05321-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="05321-124">L’instruction `if` vérifie la valeur d’un `bool`.</span><span class="sxs-lookup"><span data-stu-id="05321-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="05321-125">Quand la valeur est `true`, l’instruction qui suit `if` s’exécute.</span><span class="sxs-lookup"><span data-stu-id="05321-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="05321-126">Dans le cas contraire, elle est ignorée.</span><span class="sxs-lookup"><span data-stu-id="05321-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="05321-127">Ce processus de vérification des conditions et d’exécution des instructions en fonction de ces conditions est très performant.</span><span class="sxs-lookup"><span data-stu-id="05321-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="05321-128">Poursuivons notre exploration.</span><span class="sxs-lookup"><span data-stu-id="05321-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="05321-129">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="05321-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="05321-130">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="05321-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="05321-131">Utiliser if et else ensemble</span><span class="sxs-lookup"><span data-stu-id="05321-131">Make if and else work together</span></span>
    durationInMinutes: 10
    content: |

      <span data-ttu-id="05321-132">Pour exécuter un code différent dans les branches true et false, vous créez une branche `else` qui s’exécute quand la condition a une valeur false.</span><span class="sxs-lookup"><span data-stu-id="05321-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="05321-133">Écrivez ce code :</span><span class="sxs-lookup"><span data-stu-id="05321-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="05321-134">L’instruction qui suit le mot clé `else` s’exécute uniquement quand la condition testée a une valeur `false`.</span><span class="sxs-lookup"><span data-stu-id="05321-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="05321-135">La combinaison de `if` et `else` avec des conditions booléennes offre les hautes performances dont vous avez besoin.</span><span class="sxs-lookup"><span data-stu-id="05321-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="05321-136">La mise en retrait sous les instructions `if` et `else` a simplement pour but de faciliter la lecture.</span><span class="sxs-lookup"><span data-stu-id="05321-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="05321-137">Le langage C# ne considère pas la mise en retrait ou les espaces blancs comme des éléments significatifs.</span><span class="sxs-lookup"><span data-stu-id="05321-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="05321-138">L’instruction qui suit le mot clé `if` ou `else` sera exécutée en fonction de la condition.</span><span class="sxs-lookup"><span data-stu-id="05321-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="05321-139">Tous les exemples de ce didacticiel suivent une pratique courante pour mettre en retrait les lignes en fonction de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="05321-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="05321-140">Étant donné que la mise en retrait n’est pas significative, vous devez utiliser `{` et `}` pour indiquer quand vous souhaitez inclure plus d’une instruction dans le bloc qui s’exécute de manière conditionnelle.</span><span class="sxs-lookup"><span data-stu-id="05321-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="05321-141">Les programmeurs C# utilisent généralement les accolades pour toutes les clauses `if` et `else`.</span><span class="sxs-lookup"><span data-stu-id="05321-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="05321-142">L’exemple suivant est identique à ce que vous venez de créer.</span><span class="sxs-lookup"><span data-stu-id="05321-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="05321-143">Testez le code.</span><span class="sxs-lookup"><span data-stu-id="05321-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="05321-144">Dans le reste de ce didacticiel, tous les exemples de code incluent les accolades, conformément aux pratiques acceptées.</span><span class="sxs-lookup"><span data-stu-id="05321-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="05321-145">Vous pouvez tester des conditions plus complexes :</span><span class="sxs-lookup"><span data-stu-id="05321-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="05321-146">`&&` représente « et ».</span><span class="sxs-lookup"><span data-stu-id="05321-146">The `&&` represents "and".</span></span> <span data-ttu-id="05321-147">Cela signifie que les deux conditions doivent être true pour que l’instruction s’exécute dans la branche true.</span><span class="sxs-lookup"><span data-stu-id="05321-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="05321-148">Ces exemples montrent également que vous pouvez avoir plusieurs instructions dans chaque branche conditionnelle, à condition de les mettre entre `{` et `}`.</span><span class="sxs-lookup"><span data-stu-id="05321-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="05321-149">Vous pouvez également utiliser `||` pour représenter « ou » :</span><span class="sxs-lookup"><span data-stu-id="05321-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="05321-150">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="05321-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="05321-151">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="05321-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="05321-152">Utiliser des boucles pour répéter des opérations</span><span class="sxs-lookup"><span data-stu-id="05321-152">Use loops to repeat operations</span></span>
    durationInMinutes: 6
    content: |
      <span data-ttu-id="05321-153">Un autre concept important pour créer des programmes plus volumineux est celui des **boucles**.</span><span class="sxs-lookup"><span data-stu-id="05321-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="05321-154">Vous allez utiliser des boucles pour répéter des instructions que vous souhaitez exécuter plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="05321-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="05321-155">Exécutez le code suivant dans la fenêtre interactive :</span><span class="sxs-lookup"><span data-stu-id="05321-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="05321-156">L’instruction `while` vérifie une condition et exécute l’instruction qui suit `while`.</span><span class="sxs-lookup"><span data-stu-id="05321-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="05321-157">Elle répète la vérification de la condition et l’exécution de ces instructions jusqu'à ce que la condition soit false.</span><span class="sxs-lookup"><span data-stu-id="05321-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="05321-158">Cet exemple contient un nouvel opérateur.</span><span class="sxs-lookup"><span data-stu-id="05321-158">There's one other new operator in this example.</span></span> <span data-ttu-id="05321-159">`++` après la variable `counter` est l’opérateur d’**incrémentation**.</span><span class="sxs-lookup"><span data-stu-id="05321-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="05321-160">Il ajoute 1 à la valeur de compteur et stocke cette valeur dans la variable de compteur.</span><span class="sxs-lookup"><span data-stu-id="05321-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="05321-161">Assurez-vous que la condition de boucle `while` ne devienne pas false quand vous exécutez le code.</span><span class="sxs-lookup"><span data-stu-id="05321-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="05321-162">Dans le cas contraire, vous allez créer une **boucle infinie** dans laquelle votre programme ne se terminera jamais.</span><span class="sxs-lookup"><span data-stu-id="05321-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="05321-163">Nous n’allons pas le démontrer ici, car le moteur qui exécute votre code expirerait et votre programme n’afficherait aucune sortie.</span><span class="sxs-lookup"><span data-stu-id="05321-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="05321-164">La boucle `while` teste la condition avant d’exécuter le code qui suit `while`.</span><span class="sxs-lookup"><span data-stu-id="05321-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="05321-165">La boucle `do` ... `while` exécute d’abord le code, puis vérifie la condition.</span><span class="sxs-lookup"><span data-stu-id="05321-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="05321-166">Elle ressemble à ce qui suit :</span><span class="sxs-lookup"><span data-stu-id="05321-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="05321-167">Cette boucle `do` et la boucle antérieure `while` fonctionnent de manière identique.</span><span class="sxs-lookup"><span data-stu-id="05321-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="05321-168">Passons maintenant à une dernière instruction de boucle.</span><span class="sxs-lookup"><span data-stu-id="05321-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="05321-169">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="05321-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="05321-170">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="05321-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="05321-171">Utiliser la boucle for</span><span class="sxs-lookup"><span data-stu-id="05321-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="05321-172">Une autre instruction de boucle commune présente dans le code C# est la boucle `for`.</span><span class="sxs-lookup"><span data-stu-id="05321-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="05321-173">Exécutez le code suivant dans la fenêtre interactive :</span><span class="sxs-lookup"><span data-stu-id="05321-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="05321-174">Cette boucle fonctionne de manière identique à la boucle `while` et la boucle `do` que vous avez déjà utilisées.</span><span class="sxs-lookup"><span data-stu-id="05321-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="05321-175">L’instruction `for` comprend trois parties qui contrôlent son fonctionnement.</span><span class="sxs-lookup"><span data-stu-id="05321-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="05321-176">La première partie est l’**initialiseur for** : `for counter = 0;` déclare que `counter` est la variable de boucle et définit sa valeur initiale sur `0`.</span><span class="sxs-lookup"><span data-stu-id="05321-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="05321-177">La partie centrale est la **condition for** : `counter < 10` déclare que cette boucle `for` continue à s’exécuter tant que la valeur de compteur est inférieure à 10.</span><span class="sxs-lookup"><span data-stu-id="05321-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="05321-178">La dernière partie est l’**itérateur for** : `counter++` indique comment modifier la variable de boucle après l’exécution du bloc qui suit l’instruction `for`.</span><span class="sxs-lookup"><span data-stu-id="05321-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="05321-179">Il spécifie ici que `counter` doit être incrémenté de 1 chaque fois que le bloc s’exécute.</span><span class="sxs-lookup"><span data-stu-id="05321-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="05321-180">Vérifiez-le par vous-même.</span><span class="sxs-lookup"><span data-stu-id="05321-180">Experiment with these yourself.</span></span> <span data-ttu-id="05321-181">Réalisez les essais suivants :</span><span class="sxs-lookup"><span data-stu-id="05321-181">Try each of the following:</span></span>

      - <span data-ttu-id="05321-182">Modifiez l’initialiseur pour définir le démarrage à une valeur différente.</span><span class="sxs-lookup"><span data-stu-id="05321-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="05321-183">Modifiez la condition pour définir l’arrêt à une valeur différente.</span><span class="sxs-lookup"><span data-stu-id="05321-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="05321-184">Une fois terminé, vous allez vous-même écrire des codes pour mettre en pratique ce que vous avez appris.</span><span class="sxs-lookup"><span data-stu-id="05321-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="05321-185">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="05321-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="05321-186">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="05321-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="05321-187">Combinaison de branches et de boucles</span><span class="sxs-lookup"><span data-stu-id="05321-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="05321-188">Maintenant que vous avez vu l’instruction `if` et la création de boucles en langage C#, vérifiez si vous pouvez écrire un code C# pour obtenir la somme de tous les entiers de 1 à 20 divisibles par 3.</span><span class="sxs-lookup"><span data-stu-id="05321-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="05321-189">Voici quelques conseils :</span><span class="sxs-lookup"><span data-stu-id="05321-189">Here are a few hints:</span></span>

      - <span data-ttu-id="05321-190">L’opérateur `%` vous donne le reste d’une opération de division.</span><span class="sxs-lookup"><span data-stu-id="05321-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="05321-191">L’instruction `if` vous donne la condition pour vérifier si un nombre doit être inclus dans la somme.</span><span class="sxs-lookup"><span data-stu-id="05321-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="05321-192">La boucle `for` peut vous aider à répéter une série d’étapes pour tous les nombres de 1 à 20.</span><span class="sxs-lookup"><span data-stu-id="05321-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="05321-193">Essayez par vous-même</span><span class="sxs-lookup"><span data-stu-id="05321-193">Try it yourself.</span></span> <span data-ttu-id="05321-194">et vérifiez le résultat.</span><span class="sxs-lookup"><span data-stu-id="05321-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="05321-195">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="05321-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="05321-196">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="05321-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="05321-197">Terminer le test</span><span class="sxs-lookup"><span data-stu-id="05321-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="05321-198">Vous avez terminé le didacticiel « Branches et boucles ».</span><span class="sxs-lookup"><span data-stu-id="05321-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="05321-199">Pour en savoir plus sur ces concepts, consultez les rubriques suivantes :</span><span class="sxs-lookup"><span data-stu-id="05321-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="05321-200">[Instruction if et else](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="05321-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="05321-201">[Instruction while](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="05321-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="05321-202">[Instruction do](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="05321-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="05321-203">Instruction for</span><span class="sxs-lookup"><span data-stu-id="05321-203">For statement</span></span>](../language-reference/keywords/for.md)