### YamlMime:YamlDocument
documentType: Tutorial
title: 'Nombres en C#'
metadata:
  title: '<span data-ttu-id="20717-102">Nombres en C#</span><span class="sxs-lookup"><span data-stu-id="20717-102">Numbers in C#</span></span>'
  description: '<span data-ttu-id="20717-103">Dans ce didacticiel sur les types numériques, vous allez utiliser votre navigateur pour découvrir C# de manière interactive.</span><span class="sxs-lookup"><span data-stu-id="20717-103">In this tutorial about numeric types, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="20717-104">Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur.</span><span class="sxs-lookup"><span data-stu-id="20717-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: "<span data-ttu-id=\"20717-105\">Ce didacticiel vous fait découvrir les types de nombre en C# de manière interactive à l’aide de votre navigateur et vous explique comment afficher les résultats de la compilation et de l’exécution de votre code.</span><span class=\"sxs-lookup\"><span data-stu-id=\"20717-105\">This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"20717-106\">Il contient une série de leçons pour explorer les nombres et les opérations mathématiques en C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"20717-106\">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id=\"20717-107\">Ces leçons présentent les concepts de base du langage\_C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"20717-107\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
  - title: <span data-ttu-id="20717-108">Explorer les mathématiques avec des entiers</span><span class="sxs-lookup"><span data-stu-id="20717-108">Explore integer math</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="20717-109">Exécutez le code suivant dans la fenêtre interactive.</span><span class="sxs-lookup"><span data-stu-id="20717-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="20717-110">Pour ce faire, tapez le bloc de code suivant dans la fenêtre interactive et cliquez sur le bouton **Exécuter** :</span><span class="sxs-lookup"><span data-stu-id="20717-110">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      <span data-ttu-id="20717-111">Vous venez d’observer l’une des opérations mathématiques de base avec des entiers.</span><span class="sxs-lookup"><span data-stu-id="20717-111">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="20717-112">Le type `int` représente un **entier**, qui peut être positif ou négatif.</span><span class="sxs-lookup"><span data-stu-id="20717-112">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="20717-113">Vous utilisez le symbole `+` pour effectuer une addition.</span><span class="sxs-lookup"><span data-stu-id="20717-113">You use the `+` symbol for addition.</span></span> <span data-ttu-id="20717-114">Les autres opérations mathématiques courantes avec des entiers sont les suivantes :</span><span class="sxs-lookup"><span data-stu-id="20717-114">Other common mathematical operations for integers include:</span></span>

      - <span data-ttu-id="20717-115">`-` pour la soustraction</span><span class="sxs-lookup"><span data-stu-id="20717-115">`-` for subtraction</span></span>
      - <span data-ttu-id="20717-116">`*` pour la multiplication</span><span class="sxs-lookup"><span data-stu-id="20717-116">`*` for multiplication</span></span>
      - <span data-ttu-id="20717-117">`/` pour la division</span><span class="sxs-lookup"><span data-stu-id="20717-117">`/` for division</span></span>

      > [!TIP]
      > <span data-ttu-id="20717-118">Ce didacticiel vous permet d’explorer son contenu à votre rythme en modifiant le code que vous avez écrit dans la fenêtre interactive.</span><span class="sxs-lookup"><span data-stu-id="20717-118">Throughout this tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="20717-119">Il fournit des exemples que vous pouvez mettre en pratique à chaque étape.</span><span class="sxs-lookup"><span data-stu-id="20717-119">This tutorial provides examples that you can try at each step.</span></span>

      <span data-ttu-id="20717-120">Commencez par explorer ces différentes opérations.</span><span class="sxs-lookup"><span data-stu-id="20717-120">Start by exploring those different operations.</span></span> <span data-ttu-id="20717-121">Modifiez la troisième ligne pour tester chacune de ces opérations.</span><span class="sxs-lookup"><span data-stu-id="20717-121">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="20717-122">Après chaque modification, cliquez sur le bouton **Exécuter**.</span><span class="sxs-lookup"><span data-stu-id="20717-122">After each edit, click the **Run** button.</span></span>

      <span data-ttu-id="20717-123">Soustraction :</span><span class="sxs-lookup"><span data-stu-id="20717-123">Subtraction:</span></span>

      ```csharp
      int c = a - b;
      ```

      <span data-ttu-id="20717-124">Multiplication :</span><span class="sxs-lookup"><span data-stu-id="20717-124">Multiplication:</span></span>

      ```csharp
      int c = a * b;
      ```

      <span data-ttu-id="20717-125">Division :</span><span class="sxs-lookup"><span data-stu-id="20717-125">Division:</span></span> 

      ```csharp
      int c = a / b;
      ```

      <span data-ttu-id="20717-126">Vous pouvez également, si vous le souhaitez, effectuer des essais en réalisant plusieurs opérations mathématiques dans la même ligne.</span><span class="sxs-lookup"><span data-stu-id="20717-126">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>

      > [!TIP]
      > <span data-ttu-id="20717-127">Durant votre exploration de C# (ou de tout autre langage de programmation), vous commettrez des erreurs d’écriture du code.</span><span class="sxs-lookup"><span data-stu-id="20717-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="20717-128">Le **compilateur** détectera ces erreurs et vous les signalera.</span><span class="sxs-lookup"><span data-stu-id="20717-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="20717-129">Si la sortie contient des messages d’erreur, vérifiez attentivement l’exemple de code ainsi que le code dans la fenêtre interactive pour identifier les corrections à apporter.</span><span class="sxs-lookup"><span data-stu-id="20717-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="20717-130">Cet exercice vous aidera à mieux comprendre la structure du code C#.</span><span class="sxs-lookup"><span data-stu-id="20717-130">That exercise will help you learn the structure of C# code.</span></span>     

      > [!NOTE]
      > <span data-ttu-id="20717-131">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="20717-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="20717-132">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="20717-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="20717-133">Explorer l’ordre des opérations</span><span class="sxs-lookup"><span data-stu-id="20717-133">Explore order of operations</span></span>
    durationInMinutes: 7
    content: |
      <span data-ttu-id="20717-134">Le langage C# définit la priorité des différentes opérations mathématiques avec à l’aide de règles cohérentes avec les règles mathématiques que vous avez apprises.</span><span class="sxs-lookup"><span data-stu-id="20717-134">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>
      <span data-ttu-id="20717-135">La multiplication et la division ont priorité sur l’addition et la soustraction.</span><span class="sxs-lookup"><span data-stu-id="20717-135">Multiplication and division take precedence over addition and subtraction.</span></span>
      <span data-ttu-id="20717-136">Explorez cet ordre de priorité en exécutant le code suivant dans la fenêtre interactive :</span><span class="sxs-lookup"><span data-stu-id="20717-136">Explore that by running the following code in the interactive window:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="20717-137">La sortie montre que la multiplication est effectuée avant l’addition.</span><span class="sxs-lookup"><span data-stu-id="20717-137">The output demonstrates that the multiplication is performed before the addition.</span></span>

      <span data-ttu-id="20717-138">Vous pouvez appliquer un ordre de calcul différent en mettant entre parenthèses la ou les opérations à exécuter en premier :</span><span class="sxs-lookup"><span data-stu-id="20717-138">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="20717-139">Pratiquez en combinant plusieurs opérations différentes.</span><span class="sxs-lookup"><span data-stu-id="20717-139">Explore more by combining many different operations.</span></span> <span data-ttu-id="20717-140">Remplacez la quatrième ligne ci-dessus par un contenu similaire à ce qui suit :</span><span class="sxs-lookup"><span data-stu-id="20717-140">Replace the fourth line above with something like this:</span></span>

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      <span data-ttu-id="20717-141">Vous avez peut-être observé un comportement intéressant des entiers.</span><span class="sxs-lookup"><span data-stu-id="20717-141">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="20717-142">La division d’entiers produit toujours un résultat entier, même quand le résultat mathématique devrait inclure une partie décimale ou fractionnée.</span><span class="sxs-lookup"><span data-stu-id="20717-142">Integer division always produces an integer result, even when the mathematical result would include a decimal or fraction portion.</span></span>

      <span data-ttu-id="20717-143">Si vous n’avez pas observé ce comportement, essayez ce qui suit :</span><span class="sxs-lookup"><span data-stu-id="20717-143">If you haven't seen this behavior, try the following:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="20717-144">Cliquez de nouveau sur **Exécuter** pour afficher les résultats.</span><span class="sxs-lookup"><span data-stu-id="20717-144">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="20717-145">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="20717-145">This online coding experience is in preview mode.</span></span> <span data-ttu-id="20717-146">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="20717-146">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="20717-147">Explorer la précision et les limites des entiers</span><span class="sxs-lookup"><span data-stu-id="20717-147">Explore integer precision and limits</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="20717-148">Ce dernier exemple a montré que la division d’entiers tronque le résultat.</span><span class="sxs-lookup"><span data-stu-id="20717-148">That last sample showed you that integer division truncates the result.</span></span>
      <span data-ttu-id="20717-149">Vous pouvez obtenir le **reste** à l’aide de l’opérateur **modulo**, à savoir le caractère `%` :</span><span class="sxs-lookup"><span data-stu-id="20717-149">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      <span data-ttu-id="20717-150">Le type d’entier C# diffère des entiers mathématiques d’une autre manière : le type `int` a des limites minimale et maximale.</span><span class="sxs-lookup"><span data-stu-id="20717-150">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="20717-151">Exécutez ce code dans la fenêtre interactive pour afficher ces limites :</span><span class="sxs-lookup"><span data-stu-id="20717-151">Run this code in the interactive window to see those limits:</span></span>

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      <span data-ttu-id="20717-152">Si un calcul produit une valeur qui dépasse ces limites, vous obtenez une condition de **dépassement négatif** ou **dépassement positif**.</span><span class="sxs-lookup"><span data-stu-id="20717-152">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="20717-153">La réponse affichée indique la plage (d’une limite à l’autre).</span><span class="sxs-lookup"><span data-stu-id="20717-153">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="20717-154">Ajoutez ces deux lignes dans la fenêtre interactive pour afficher un exemple :</span><span class="sxs-lookup"><span data-stu-id="20717-154">Add these two lines to the interactive window to see an example:</span></span>

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      <span data-ttu-id="20717-155">Notez que la réponse est très proche de l’entier minimal (négatif).</span><span class="sxs-lookup"><span data-stu-id="20717-155">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="20717-156">Il en est de même pour `min + 2`.</span><span class="sxs-lookup"><span data-stu-id="20717-156">It's the same as `min + 2`.</span></span> <span data-ttu-id="20717-157">L’addition a produit un **dépassement négatif** des valeurs autorisées pour les entiers.</span><span class="sxs-lookup"><span data-stu-id="20717-157">The addition operation **overflowed** the allowed values for integers.</span></span>
      <span data-ttu-id="20717-158">La réponse est un très grand nombre négatif, car un dépassement négatif « inclut » de la plus grande valeur d’entier possible à la plus petite.</span><span class="sxs-lookup"><span data-stu-id="20717-158">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>

      <span data-ttu-id="20717-159">Il existe d’autres types numériques avec une précision et des limites différentes que vous pouvez utiliser quand le type `int` ne répond pas à vos besoins.</span><span class="sxs-lookup"><span data-stu-id="20717-159">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="20717-160">Nous les explorerons à l’étape suivante.</span><span class="sxs-lookup"><span data-stu-id="20717-160">Let's explore those next.</span></span>

      > [!NOTE]
      > <span data-ttu-id="20717-161">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="20717-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="20717-162">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="20717-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="20717-163">Utiliser le type double</span><span class="sxs-lookup"><span data-stu-id="20717-163">Work with the double type</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="20717-164">Le type numérique `double` représente un nombre à virgule flottante double précision.</span><span class="sxs-lookup"><span data-stu-id="20717-164">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="20717-165">Ces termes vous sont peut-être inconnus.</span><span class="sxs-lookup"><span data-stu-id="20717-165">Those terms may be new to you.</span></span> <span data-ttu-id="20717-166">Un nombre **à virgule flottante** est utile pour représenter de très grand ou petits nombres non intégraux.</span><span class="sxs-lookup"><span data-stu-id="20717-166">A **floating point** number is useful to represent non-integral numbers that may be very large, or small in magnitude.</span></span> <span data-ttu-id="20717-167">La **double précision** signifie que ces nombres sont stockés avec une précision supérieure à la **simple précision**.</span><span class="sxs-lookup"><span data-stu-id="20717-167">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="20717-168">Sur les ordinateurs modernes, les nombres double précision sont généralement plus utilisés que les nombres simple précision.</span><span class="sxs-lookup"><span data-stu-id="20717-168">On modern computers, it is more common to use double precision than single precision numbers.</span></span>
      <span data-ttu-id="20717-169">Explorons ce type double.</span><span class="sxs-lookup"><span data-stu-id="20717-169">Let's explore.</span></span> <span data-ttu-id="20717-170">Exécutez le code suivant dans la fenêtre interactive et observez le résultat :</span><span class="sxs-lookup"><span data-stu-id="20717-170">Try the following code in the interactive window and see the result:</span></span>

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="20717-171">Notez que la réponse inclut la partie décimale du quotient.</span><span class="sxs-lookup"><span data-stu-id="20717-171">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="20717-172">Essayez avec une expression légèrement plus complexe utilisant des doubles :</span><span class="sxs-lookup"><span data-stu-id="20717-172">Try a slightly more complicated expression with doubles:</span></span>

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="20717-173">La plage d’une valeur double est nettement supérieure à celle de valeurs entières.</span><span class="sxs-lookup"><span data-stu-id="20717-173">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="20717-174">Exécutez le code suivant dans la fenêtre interactive :</span><span class="sxs-lookup"><span data-stu-id="20717-174">Try the following code in the interactive window:</span></span>

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      <span data-ttu-id="20717-175">Ces valeurs s’affichent sous forme de notation scientifique.</span><span class="sxs-lookup"><span data-stu-id="20717-175">These values are printed out to represent scientific notation.</span></span> <span data-ttu-id="20717-176">Le nombre à gauche du `E` est le nombre significatif.</span><span class="sxs-lookup"><span data-stu-id="20717-176">The number to the left of the `E` is the significant.</span></span> <span data-ttu-id="20717-177">Le nombre à droite est l’exposant, en puissance de 10.</span><span class="sxs-lookup"><span data-stu-id="20717-177">The number to the right is the exponent, as a power of 10.</span></span> <span data-ttu-id="20717-178">En interne, ces nombres sont représentés de manière similaire, mais sous forme binaire.</span><span class="sxs-lookup"><span data-stu-id="20717-178">Internally, these numbers are represented similarly, but in a binary form.</span></span> <span data-ttu-id="20717-179">Une partie représente les chiffres binaires significatifs.</span><span class="sxs-lookup"><span data-stu-id="20717-179">One part represents the significant binary digits.</span></span>
      <span data-ttu-id="20717-180">L’autre partie représente l’endroit où placer la virgule binaire (analogue à une virgule décimale) par rapport à ces chiffres significatifs.</span><span class="sxs-lookup"><span data-stu-id="20717-180">Another part represents where to place the binary point (analogous to a decimal point) relative to those significant digits.</span></span>

      <span data-ttu-id="20717-181">Tout comme les nombres décimaux en mathématiques, les doubles en C# peuvent présenter des erreurs d’arrondi.</span><span class="sxs-lookup"><span data-stu-id="20717-181">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="20717-182">Exécutez le code suivant :</span><span class="sxs-lookup"><span data-stu-id="20717-182">Try this code:</span></span>

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      <span data-ttu-id="20717-183">Vous savez que la valeur extensible `0.3` ne correspond pas exactement à `1/3`.</span><span class="sxs-lookup"><span data-stu-id="20717-183">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>

      <span data-ttu-id="20717-184">***Test***</span><span class="sxs-lookup"><span data-stu-id="20717-184">***Challenge***</span></span>

      <span data-ttu-id="20717-185">Effectuez d’autres calculs avec des grands nombres, des petits nombres, des multiplications et des divisions à l’aide du type `double`.</span><span class="sxs-lookup"><span data-stu-id="20717-185">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="20717-186">Effectuez des calculs plus complexes.</span><span class="sxs-lookup"><span data-stu-id="20717-186">Try more complicated calculations.</span></span>

      > [!NOTE]
      > <span data-ttu-id="20717-187">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="20717-187">This online coding experience is in preview mode.</span></span> <span data-ttu-id="20717-188">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="20717-188">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="20717-189">Utiliser des types de virgule fixe</span><span class="sxs-lookup"><span data-stu-id="20717-189">Work with fixed point types</span></span>
    durationInMinutes: 8
    content: |
      <span data-ttu-id="20717-190">Vous avez vu les types numériques de base en C#, à savoir les entiers et les doubles.</span><span class="sxs-lookup"><span data-stu-id="20717-190">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="20717-191">Il existe un autre type à découvrir : le type `decimal`.</span><span class="sxs-lookup"><span data-stu-id="20717-191">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="20717-192">Le type `decimal` a une plage plus petite, mais une précision supérieure à celle du type `double`.</span><span class="sxs-lookup"><span data-stu-id="20717-192">The `decimal` type has a smaller range, but greater precision than `double`.</span></span> <span data-ttu-id="20717-193">Le terme **virgule fixe** signifie que la virgule décimale (ou virgule binaire) ne se déplace pas.</span><span class="sxs-lookup"><span data-stu-id="20717-193">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="20717-194">Étudions cela d’un peu plus près :</span><span class="sxs-lookup"><span data-stu-id="20717-194">Let's take a look:</span></span>

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      <span data-ttu-id="20717-195">Notez que la plage est plus petite que celle du type `double`.</span><span class="sxs-lookup"><span data-stu-id="20717-195">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="20717-196">Vous pouvez observer la plus haute précision du type décimal en exécutant le code suivant :</span><span class="sxs-lookup"><span data-stu-id="20717-196">You can see the greater precision with the decimal type by trying the following code:</span></span>

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      <span data-ttu-id="20717-197">Le suffixe `M` des nombres permet d’indiquer comment une constante doit utiliser le type `decimal`.</span><span class="sxs-lookup"><span data-stu-id="20717-197">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>

      <span data-ttu-id="20717-198">Notez que le calcul utilisant le type décimal a plus de chiffres à droite de la virgule décimale.</span><span class="sxs-lookup"><span data-stu-id="20717-198">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> 

      <span data-ttu-id="20717-199">***Test***</span><span class="sxs-lookup"><span data-stu-id="20717-199">***Challenge***</span></span>

      <span data-ttu-id="20717-200">Maintenant que vous avez vu les différents types numériques, écrivez un code qui calcule la surface d’un cercle avec un rayon de 2,5 pouces.</span><span class="sxs-lookup"><span data-stu-id="20717-200">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id="20717-201">Rappelez-vous que la surface d’un cercle est le rayon au carré multiplié par PI.</span><span class="sxs-lookup"><span data-stu-id="20717-201">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="20717-202">Conseil : C# contient une constante pour PI, à savoir `Math.PI`, que vous pouvez utiliser pour cette valeur.</span><span class="sxs-lookup"><span data-stu-id="20717-202">One hint: C# contains a constant for PI: `Math.PI` that you can use for that value.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="20717-203">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="20717-203">This online coding experience is in preview mode.</span></span> <span data-ttu-id="20717-204">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="20717-204">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="20717-205">Terminer le test</span><span class="sxs-lookup"><span data-stu-id="20717-205">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="20717-206">Vous avez terminé le didacticiel « Nombres en C# ».</span><span class="sxs-lookup"><span data-stu-id="20717-206">You've completed the "Numbers in C#" tutorial.</span></span> <span data-ttu-id="20717-207">Pour en savoir plus sur les nombres en C#, consultez les rubriques suivantes :</span><span class="sxs-lookup"><span data-stu-id="20717-207">You can learn more about numbers in C# in the following topics:</span></span>

      <span data-ttu-id="20717-208">[Tableau des types intégraux](../language-reference/keywords/integral-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="20717-208">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  
      <span data-ttu-id="20717-209">[Tableau des types virgule flottante](../language-reference/keywords/floating-point-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="20717-209">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  
      <span data-ttu-id="20717-210">[Tableau des types intégrés](../language-reference/keywords/built-in-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="20717-210">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  
      <span data-ttu-id="20717-211">[Tableau des conversions numériques implicites](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class="sxs-lookup"><span data-stu-id="20717-211">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  
      [<span data-ttu-id="20717-212">Tableau des conversions numériques explicites</span><span class="sxs-lookup"><span data-stu-id="20717-212">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)